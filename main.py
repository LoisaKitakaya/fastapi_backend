from typing import List
from pydantic import BaseModel
from fastapi import FastAPI, HTTPException
from services.gemini import get_gemini_response

# App initialization

app = FastAPI(
    title="Recipe and Meal Planning API",
    description="API for generating recipes and meal plans using Gemini AI",
    version="1.0.0",
)


# Pydantic models for request and response


class QueryRequest(BaseModel):
    query: str


class Details(BaseModel):
    recipe_name: str
    ingredients: List[str]
    instructions: List[str]
    tips: List[str]
    prep_time: str


class RecipeResponse(BaseModel):
    answer: str
    details: Details


@app.get("/")
async def read_root():
    """
    Root endpoint for health check.
    """

    return {"message": "Recipe and Meal Planning API is running"}


@app.post("/api/query", response_model=RecipeResponse)
async def query_recipe(request: QueryRequest):
    """
    Process a user query and return a recipe generated by Gemini AI.

    Args:
        request: QueryRequest object containing the user's query.

    Returns:
        RecipeResponse with the recipe details.

    Raises:
        HTTPException: If the query is invalid or Gemini AI fails.
    """

    if not request.query.strip():
        raise HTTPException(status_code=400, detail="Query cannot be empty")

    try:
        response = get_gemini_response(request.query)

        return RecipeResponse(**response)

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error processing query: {str(e)}")
